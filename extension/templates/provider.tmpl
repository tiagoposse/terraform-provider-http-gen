{{ define "entform/provider" }}

package {{ .PackageName }}

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	{{ range $source := $.Resources }}
	{{ printf "%s/%s" $.ClientsPackage $source | quote }}
	{{- end }}
	{{ range $source := $.DataSources }}
	{{ printf "%s/%s" $.ClientsPackage $source | quote }}
	{{- end }}

	{{ .Clients | quote }}
)

// Ensure {{ .Name }}Provider satisfies various provider interfaces.
var _ provider.Provider = &{{ .Name }}Provider{}

// {{ .Name }}Provider defines the provider implementation.
type {{ .Name }}Provider struct {
	// version is set to the provider version on release, "dev" when the
	// provider is built and ran locally, and "test" when running acceptance
	// testing.
	version string
}

func (p *{{ .Name }}Provider) Metadata(ctx context.Context, req provider.MetadataRequest, resp *provider.MetadataResponse) {
	resp.TypeName = "{{ .Name }}"
	resp.Version = p.version
}

func (p *{{ .Name }}Provider) Schema(ctx context.Context, req provider.SchemaRequest, resp *provider.SchemaResponse) {
	resp.Schema = {{ .Name }}ProviderSchema(ctx)
}

func (p *{{ .Name }}Provider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
	var data {{ .Name }}Model

	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	client, err := clients.NewClientWithResponses(data.Endpoint.String())
	if err != nil {
		resp.Diagnostics.AddError("Provider error", fmt.Sprintf("got error: %v", err))
	}

	resp.DataSourceData = client
	resp.ResourceData = client
}

func (p *{{ .Name }}Provider) Resources(ctx context.Context) []func() resource.Resource {
	return []func() resource.Resource{
		{{- range $resource, $package := .Resources }}
            {{ $package }}.New{{ $resource }}Resource,
        {{- end }}
	}
}

func (p *{{ .Name }}Provider) DataSources(ctx context.Context) []func() datasource.DataSource {
	return []func() datasource.DataSource{
		{{- range $resource, $package := .DataSources }}
            {{ $package }}.New{{ $resource }}DataSource,
        {{- end }}
	}
}

func New(version string) func() provider.Provider {
	return func() provider.Provider {
		return &{{ .Name }}Provider{
			version: version,
		}
	}
}
{{- end }}
